{
  "size": 0,
  "query": {
    "range": {
      "@timestamp": {
        "gte": 1622505600000,
        "lt":  1622527200000
      }
    }
  },
  "aggs": {
    "process": {
      "terms": {
        "field": "tag",
        "size": 12
      },
      "aggs": {
        "is_beaconing": {
          "scripted_metric": {
            "params": {
                "time_field": "@timestamp",
                "range_start_millis": 1622505600,
                "number_buckets_in_range": 360,
                "time_bucket_length": 60,
                "max_beaconing_cov": 0.1,
                "min_beaconing_autocovariance": 0.5,
                "max_jitter": 0.1
            },
            "init_script": """
                // The number of 360 equals the search range divided by the time_bucket_length.
                state.counts = new int[params["number_buckets_in_range"]];
            """,
            "map_script": """
              int bucket = (int)((doc[params["time_field"]].value.toEpochSecond() - 
                                  params.range_start_millis) / params["time_bucket_length"]);
              if (bucket > 0 && bucket < state.counts.length) {
                  state.counts[bucket] = state.counts[bucket] + 1;
              }
            """,
            "combine_script": "return state",
            "reduce_script": """
              // Painless allows you to specify functions at the start of the script which can
              // be called later on. Here we factor out some utilities to reduce code duplication
              // and improve readability.

              int firstComplete(int[] counts) {
                  int i = 0;
                  for (; i < counts.length && counts[i] == 0; i++) {}
                  return i + 1;
              }
              int lastComplete(int[] counts) {
                  int i = counts.length;
                  for (; i > 0 && counts[i - 1] == 0; i--) {}
                  return i - 1;
              }
              int zeros(int a, int b, int[] counts) {
                  int count = 0;
                  for (int i = a; i < b; i++) { if (counts[i] == 0) { count++; } }
                  return count;
              }
              float mean(int a, int b, int stride, def array) {
                  float m = 0;
                  float n = 0;
                  for (int i = a; i < b; i = i + stride) {
                      float x = (float)array[i];
                      m = (n * m + x) / (n + 1);
                      n = n + 1;
                  }
                  return m;
              }
              float variance(float mean, int a, int b, int stride, def array) {
                  float v = 0;
                  float n = 0;
                  for (int i = a; i < b; i = i + stride) {
                      float x = (float)array[i];
                      v = (n * v + (x - mean) * (x - mean)) / (n + 1);
                      n = n + 1;
                  }
                  return v;
              }
              float max(def array) {
                  float max = array[0];
                  for (int i = 1; i < array.length; i++) { if (array[i] > max) { max = array[i]; }}
                  return max;
              }

              // Aggregate the range window bucket counts
              def counts = new int[params["number_buckets_in_range"]];              

              // In a scripted metric aggregation the states variable is a list of the
              // objects returned by the combine_script from each shard.
              for (state in states) {
                for (int i = 0; i < counts.length; i++) {
                  counts[i] = counts[i] + state.counts[i];
                }
              }

              int a = firstComplete(counts);
              int b = lastComplete(counts);

              // There are too few buckets to be confident in the test statistics.
              if (b - a < 16) {
                return ["beaconing": false];
              }

              float m = mean(a, b, 1, counts);
              float v = variance(m, a, b, 1, counts);
              if (v < 0.1 * m) {
                return ["beaconing": true];
              }

              // If the frequency is too high we can't properly estimate the period.
              if (2 * zeros(a, b, counts) < b - a) {
                return ["beaconing": false];
              }

              // If the signal is sparse on the bucket length its variance will be high.
              // However, in this case we can check if the values arrive periodically by
              // checking the autocovariance is high.

              int maxPeriod = (int)(counts.length / 4);
              float[] ac = new float[maxPeriod - 1];

              for (int period = 2; period <= maxPeriod; period++) {

                // Allow for jitter <= 10% of period.
                int jitter = (int)(0.1 * period);

                int n = 0;
                for (int i = a; i < b - 2 * period - jitter + 1; i = i + period) {
                    float[] aci = new float[2 * jitter + 1];
                    for (int j = -jitter; j <= jitter; j++) {
                        for (int k = i; k < i + period; k++) {
                            aci[jitter + j] = aci[jitter + j] +
                                              (counts[k] - m) * (counts[k + period + j] - m);
                        }
                    }
                    ac[period - 2] = ac[period - 2] + max(aci);
                    n = n + period;
                }
                ac[period - 2] = ac[period - 2] / n;
              }

              // We use the fact that if a signal is periodic with period p it will
              // have high autocovariance for any shift i * p for integer i. So we
              // average over the autocovariance for multiples of the period. This
              // works around the fact that smoothly varying signals will have high
              // autocovariance for small shifts.
              for (int i = 0; 2 * i < ac.length; i++) {
                  ac[i] = mean(i, ac.length, i + 2, ac);
              }

              float pearson = max(ac) / v;
        
              return ["beaconing": pearson >= 0.75];
            """
          }
        }
      }
    }
  }
}
